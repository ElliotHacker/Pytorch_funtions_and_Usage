import torch

# 1.布尔索引
def test01():
    # 固定随机数种子
    torch.manual_seed(0)

    data = torch.randint(0,10,[4, 5])
    print(data)

    # 希望能够获得该张量中所有大于3的元素
    print(data>3)
    print(data[data>3])

    # 希望返回第2列元素大于6的行
    print(data[data[:,1] > 6])

    # 希望返回第2行元素大于3的所有列
    print(data[:,data[1]>3])

# 2.多维索引
def test02():

    torch.manual_seed(0)
    data = torch.randint(0,10,[3, 4, 5])
    print(data)
    print('-'*30)

    # 按照第0个维度选择第0元素，4行5列元素
    print(data[0, :, :])
    print('-' * 30)
    """
    tensor([[[4, 9, 3, 0, 3],
         [9, 7, 3, 7, 3],
         [1, 6, 6, 9, 8],
         [6, 6, 8, 4, 3]],

        [[6, 9, 1, 4, 4],
         [1, 9, 9, 9, 0],
         [1, 2, 3, 0, 5],
         [5, 2, 9, 1, 8]],

        [[8, 3, 6, 9, 1],
         [7, 3, 5, 2, 1],
         [0, 9, 3, 1, 1],
         [0, 3, 6, 6, 7]]])
    ------------------------------
    tensor([[4, 9, 3, 0, 3],
        [9, 7, 3, 7, 3],
        [1, 6, 6, 9, 8],
        [6, 6, 8, 4, 3]])
    """
    # 按照第1个维度选择第0元素
    print(data[:, 0, :])
    print('-' * 30)
    """
    tensor([[[4, 9, 3, 0, 3],
         [9, 7, 3, 7, 3],
         [1, 6, 6, 9, 8],
         [6, 6, 8, 4, 3]],

        [[6, 9, 1, 4, 4],
         [1, 9, 9, 9, 0],
         [1, 2, 3, 0, 5],
         [5, 2, 9, 1, 8]],

        [[8, 3, 6, 9, 1],
         [7, 3, 5, 2, 1],
         [0, 9, 3, 1, 1],
         [0, 3, 6, 6, 7]]])
    ------------------------------
    tensor([[4, 9, 3, 0, 3],
        [6, 9, 1, 4, 4],
        [8, 3, 6, 9, 1]])
    """
    # 按照第2个维度选择第0元素
    print(data[:, :, 0])
    print('-' * 30)
    """
    tensor([[[4, 9, 3, 0, 3],
         [9, 7, 3, 7, 3],
         [1, 6, 6, 9, 8],
         [6, 6, 8, 4, 3]],

        [[6, 9, 1, 4, 4],
         [1, 9, 9, 9, 0],
         [1, 2, 3, 0, 5],
         [5, 2, 9, 1, 8]],

        [[8, 3, 6, 9, 1],
         [7, 3, 5, 2, 1],
         [0, 9, 3, 1, 1],
         [0, 3, 6, 6, 7]]])
    ------------------------------
    tensor([[4, 9, 1, 6],
        [6, 1, 1, 5],
        [8, 7, 0, 0]])
    """

if __name__ == '__main__':
    test02()